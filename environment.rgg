const float latitude 			= 17.4 * Math.PI/180;	// the latitude of location of the scene (Turneffe Atoll, Belize)
static int dayOfYear			= 353;//18.12.2016				

static double fieldWidth	= 10;
static double fieldLength	= 10;


// daylength (from Diurnal model by A. Morales)
static double calcDayLength(int doy, double lat) {
	// Declination angle of the sun due to the fact that Earth's rotation axis is not perpendicular to translation plane
	double dec = Math.asin(-Math.sin(23.45*Math.PI/180.0)*Math.cos(2.0*Math.PI*(doy + 10.0)/365.0));
	// Calculate sunset angle with respect to solar non
	double cosSunset = -Math.tan(lat)*Math.tan(dec);
	double sunset = cosSunset > 1 ? 0 : (cosSunset < -1 ? Math.PI : Math.acos(cosSunset));
	// Length of the day (sunrise - sunset) in hours
	return 2.0*sunset/Math.PI*12;
}

// setup of light sources (45, 90)
const float ToRadians					= Math.PI/180;		// conversion factor degrees to radians
const float ToDegree					= 180/Math.PI;		// conversion factor radians to degrees
const float Transmissivity				= 0.3548;			// based on KNMI data 10 years' mean; percentage of light that transmitted through atmosphere on a day of clear sky
const float FractionDiffuseLightDaily	= 0.8;				//1.33 - 1.46*0.3548 // fraction of diffuse light in the total radiation on a day of clear sky  Spitter 1986
const float tilt						= 23.45*ToRadians;	// tilt of the earth axis
const float c							= 0.4; 				// parameter for collecting radiation transition related with elevation angle Spitter 1986
const int n								= 24;				// number of direct light sources during the day
static float[][] betaAzimSdr			= new float[3][];	// row 1 solar elevation beta; row 2 solar azimuth; and row 3 direct light

static float DailyDiffuseRadiation;
static float globalRadiationIntensity;			// total incoming radiation from all directions at the horizontal plane
static float PPFD;								// photosynthetic photon flux density in umol/m2/s
static double dayLength;						// hours of daylight

static void updateIncomingLight() {
	dayLength = calcDayLength(dayOfYear, latitude);
	betaAzimSdr = getRadiation(dayOfYear, latitude, n);
	globalRadiationIntensity = /*0.7**/betaAzimSdr[2][n] ;
	PPFD = 1e6 * 0.55 * 4.55 * globalRadiationIntensity / (dayLength*60*60);
	DailyDiffuseRadiation = /*0.7**/betaAzimSdr[2][n+1];
}

// solar azimuth angle
static float[][] getRadiation(int dayOfYear, float latitude, int n) {
	//daily parameters
    float eccentricity =  1+0.033*Math.cos(2*Math.PI*(dayOfYear-10)/365);  // the position of the earth during the year
	float sinDelta = -Math.sin(tilt) * Math.cos(2*Math.PI*(dayOfYear+10)/365); 
	float cosDelta = Math.sqrt(1-(sinDelta)**2);  //delta is the declination of the sun with respect to the earth equator
	float a = Math.sin(latitude)*sinDelta;  // the season-dependent solar shift with respect to the equator
	float b = Math.cos(latitude)*cosDelta;  // the season-dependent amlitude of tthe sine of solar height
	float dayLength = 12 *(1+(2/Math.PI)*Math.asin(a/b));
	float tsr = 12 - dayLength/2;			// time of sun rise
	float IntegralOfDailySinBeta = 3600*(dayLength*(a + c *(a**2 + 0.5 * b**2)) + 
			12/Math.PI * b*(2+ 3 * c *a)* Math.sqrt(1 - a**2 / b**2));   // daily integral of sinbeat take account of the transmission at different angle
			
	float DailyExtraTerrestrialRadiation = 1367 * eccentricity * IntegralOfDailySinBeta/ 1e6; //Daily extraterrestrial solar
	float DailyDiffuseRadiation =  FractionDiffuseLightDaily * Transmissivity  * DailyExtraTerrestrialRadiation;
	// hourly parameters
	float timeInterval = dayLength / n * 3600; // Time interval in seconds
	float[] hourAngle = new float[n];
	float[] beta = new float[n];
	float Sg = 0;  // instantaneous light intensity
	float S0 = 1367 * eccentricity/ 1e6;  //instant External radiation
	float S0d = 0;
	float[][] betaAzimSdr = new float[3][];  // row 0 beta; row 1 azimuth; and row 3 direct light in one array
	betaAzimSdr[0] = new float[n];
	betaAzimSdr[1] = new float[n];
	betaAzimSdr[2] = new float[n+2]; // add daily total radiation MJ/m2, daily total at horzontal plane and daily diffuse light
	
	for (int j = 0; j <= n-1; j++) {
		hourAngle[j] = 2 * Math.PI *(tsr + j*timeInterval/3600 - 12)/24;
		beta[j] = Math.asin(a + b * Math.cos(hourAngle[j]));
		betaAzimSdr[0][j] = ToDegree * beta[j]; // beta in degree
		if (betaAzimSdr[0][j] < 0) {betaAzimSdr[2][j] = 0;}  // make the morning and afternoon points symetric
		//azimuth
		betaAzimSdr[1][j] = ToDegree * Math.acos( Math.min(1.0, (Math.sin(beta[j]) * Math.sin(latitude) - sinDelta)
							/( Math.cos(beta[j]) * Math.cos(latitude)))); // azimuth in degree
		betaAzimSdr[1][j] = (hourAngle[j] > 0)? (180+ betaAzimSdr[1][j])%360
							:(3* 180 - betaAzimSdr[1][j])%360;
		if(hourAngle[j]==0) {betaAzimSdr[1][j] = betaAzimSdr[1][j-1] > 90 ? 180:0;};
		//direct light at perpendicular direction, since the light model can account for the solar elevation angle
		Sg = (1+ c * Math.sin(beta[j])) * Transmissivity * DailyExtraTerrestrialRadiation / IntegralOfDailySinBeta;  
		betaAzimSdr[2][j] = (1- FractionDiffuseLightDaily) * Sg * timeInterval; // Direct radiation integrated over delt in MJ/m2
	}
	betaAzimSdr[2][n] =  DailyExtraTerrestrialRadiation * Transmissivity; 	 // add daily total radiation at horizontal plane MJ/m2
	betaAzimSdr[2][n+1] =  DailyDiffuseRadiation; 				// add daily diffuse radiation MJ/m2
	
	return betaAzimSdr;
}
