import de.grogra.imp3d.spectral.IrregularSpectralCurve;

import static environment.*;


////////////////////////////////////////////////////////////////////////////////
// LIGHT MODEL
////////////////////////////////////////////////////////////////////////////////

// light model setup 
final static int LM_RAYS 		= 20000000;
final static int LM_DEPTH 		= 10;
final static int LM_SEED		= 5000;

// GPU FLUX LM
final static FluxLightModel lmFlux = new FluxLightModel(LM_RAYS, LM_DEPTH);
// CPU FLUX LM
final static LightModel lm = new LightModel(LM_RAYS, LM_DEPTH);


////////////////////////////////////////////////////////////////////////////////
// LIGHT SOURCES
////////////////////////////////////////////////////////////////////////////////

const int n						= 24;		// number of direct light sources during the day
static boolean seeRays			= false;	// see direction of rays from light sources if true

// light source module
module SingleLight(double power) extends LightNode().(setLayer(15), setLight(new DirectionalLight().(setPowerDensity(power), setVisualize(seeRays), getColor().set(new RGBColor(1,1,1)))))
//==> Sphere(0.1)
;

// direct light source
module DirectLight
{
	float mod;
	float[] power = new float[n]; 			// Radiation intensity for every node
	float[] beta = new float[n]; 			// Solar elevation angle
	float[] azimuth = new float[n]; 		// Solar azimuth angle
	double dist;							// distance of the light sources from the center of the scene
	
	void initiate(double d) {
		dist = Math.max(10,d);
	}
		void update() {
		for (int j=0; j <= n-1; j++) {			
			beta[j] = betaAzimSdr[0][j];
			azimuth[j] = betaAzimSdr[1][j];
			power[j] = 1e6 * 0.55 * 4.55 * betaAzimSdr[2][j] / (dayLength*60*60);
		}
	}
} 
==> AdjustLU RL(90) RU(90*mod)
[for (int j=0; j <= n-1; j++) ([RU(azimuth[j]) RL(-beta[j]) M(dist) RL(180) SingleLight(power[j])] /* {println( power[j]);} */  ) ]
;

// diffuse light source
module DiffuseLight
{
	float power;
	double dist;							// distance of the light sources from the center of the scene
	void initiate(double d) {
		dist = Math.max(10,d);
	}
	void update() {
		power = 1e6 * 0.55 * 4.55 * DailyDiffuseRadiation / (dayLength*60*60);
	}
}
==>// RH(random(0,360))
	RL(90)
	
	// original
	[ for (int i = 1; i<=12; i++) ([ RU(i*360/12) RL(-11.7) M(dist) RL(180) SingleLight(power*0.003218)] )]
	[ for (int i = 1; i<=12; i++) ([ RU(20) RU(i*360/12) RL(-34.2) M(dist) RL(180) SingleLight(power*0.01163)] )]
	[ for (int i = 1; i<=12; i++) ([ RU(40) RU(i*360/12) RL(-54.9) M(dist) RL(180) SingleLight(power*0.019812)] )]
	[ for (int i = 1; i<=12; i++) ([ RU(60) RU(i*360/12) RL(-71.1) M(dist) RL(180) SingleLight(power*0.023022)] )]
	[ for (int i = 1; i<=12; i++) ([ RU(80) RU(i*360/12) RL(-82.8) M(dist) RL(180) SingleLight(power*0.018522)] )]
	[ for (int i = 1; i<=12; i++) ([ RU(80) RU(i*360/12) RL(-89.1) M(dist) RL(180) SingleLight(power*0.007096)])]
;
